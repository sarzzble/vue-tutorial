ğŸ”„ 1. Temel Farklar
| Ã–zellik           | `ref()`                                              | `reactive()`                                   |
| ----------------- | ---------------------------------------------------- | ---------------------------------------------- |
| KullanÄ±m amacÄ±    | Primitif (string, number, boolean) ve tekil deÄŸerler | Objeler, diziler gibi karmaÅŸÄ±k veri yapÄ±larÄ±   |
| EriÅŸim ÅŸekli      | `.value` ile eriÅŸilir                                | DoÄŸrudan eriÅŸilir                              |
| Ä°Ã§ iÃ§e yapÄ±       | Derin reaktivite yok (iÃ§ objeler reactive olmaz)     | Derin reaktiftir (iÃ§ objeler de reactive olur) |
| Proxy mekanizmasÄ± | DeÄŸer, proxy iÃ§inde `.value`'da saklanÄ±r             | TÃ¼m nesne proxy'ye dÃ¶nÃ¼ÅŸtÃ¼rÃ¼lÃ¼r                |

ğŸ§ª 2. Kodla KarÅŸÄ±laÅŸtÄ±rma
âœ… ref() KullanÄ±mÄ±:
import { ref } from 'vue';
const count = ref(0);
count.value++; // eriÅŸim iÃ§in `.value` gerekir

âœ… reactive() KullanÄ±mÄ±:
import { reactive } from 'vue';
const user = reactive({
  name: mario
  age: 25
});
user.name = 'Ahmet'; // doÄŸrudan eriÅŸim

ğŸ§  3. Ne Zaman Hangisi KullanÄ±lÄ±r?
ref():
Primitif tÃ¼rler (number, string, boolean) iÃ§in idealdir
v-model ile kullanÄ±mda yaygÄ±ndÄ±r
Vue <script setup> iÃ§inde daha sade kullanÄ±m sunar
Tek bir deÄŸeri izlemek istersen kullanÄ±lÄ±r

reactive():
KarmaÅŸÄ±k objeler veya diziler iÃ§in uygundur
Ã‡ok alanlÄ± formlar, ayarlar nesneleri gibi yapÄ±larda idealdir
Ä°Ã§ iÃ§e objeleri reaktif olarak yÃ¶netmek istiyorsan tercih edilir